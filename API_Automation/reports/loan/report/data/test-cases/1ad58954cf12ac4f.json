{"uid":"1ad58954cf12ac4f","name":"TC_018 - Verify that disbursementChannel(without) Filed Non Mandatory, system should allow creating (POST) a loan record.","fullName":"API_Automation.tests.LoanTest.test_Loan.TestLoanManagement#test_POST_WithOutdisbursementChannel","historyId":"a1fdff0ca9c27329151f16e415180cd9","time":{"start":1759491617336,"stop":1759491618085,"duration":749},"status":"failed","statusMessage":"AssertionError: POST request can be OpeningBalanceTrue means outsidePayrollPayment(with) Field Mandatory, status 200\nassert 200 == 400\n +  where 200 = <APIResponse url='https://compbenefits8.dev.zoolwork.com/api/CompBenefits/companies/3a1a417d-51c2-bab1-6b7f-5b97cd6a53f8/loans' status=200 status_text='OK'>.status","statusTrace":"self = <API_Automation.tests.LoanTest.test_Loan.TestLoanManagement object at 0x00000210CFB1B960>\nplaywright = <playwright._impl._playwright.Playwright object at 0x00000210D1219010>, companyId = '3a1a417d-51c2-bab1-6b7f-5b97cd6a53f8'\n\n    @allure.title(\n        \"TC_018 - Verify that disbursementChannel(without) Filed Non Mandatory, system should allow creating (POST) a loan record.\")\n    @pytest.mark.parametrize(\"companyId\", [\"3a1a417d-51c2-bab1-6b7f-5b97cd6a53f8\"])\n    def test_POST_WithOutdisbursementChannel(self, playwright, companyId):\n        loan_client = LoanAPI(playwright, BASE_URL, TOKEN)\n        payload_path = os.path.join(\n            os.path.dirname(__file__),\n            \"..\", \"..\", \"data\", \"loan\", \"disbursementChannelWithout.json\"\n        )\n        with open(payload_path, \"r\") as f:\n            payload = json.load(f)\n        # Make POST request\n        response = loan_client.post_loans(companyId, payload)\n    \n>       assert response.status == 400, f\"POST request can be OpeningBalanceTrue means outsidePayrollPayment(with) Field Mandatory, status {response.status}\"\nE       AssertionError: POST request can be OpeningBalanceTrue means outsidePayrollPayment(with) Field Mandatory, status 200\nE       assert 200 == 400\nE        +  where 200 = <APIResponse url='https://compbenefits8.dev.zoolwork.com/api/CompBenefits/companies/3a1a417d-51c2-bab1-6b7f-5b97cd6a53f8/loans' status=200 status_text='OK'>.status\n\nAPI_Automation\\tests\\LoanTest\\test_Loan.py:562: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"playwright","time":{"start":1759491607011,"stop":1759491607526,"duration":515},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_url","time":{"start":1759491607011,"stop":1759491607011,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"delete_output_dir","time":{"start":1759491607011,"stop":1759491607011,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"_verify_url","time":{"start":1759491607011,"stop":1759491607011,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"pytestconfig","time":{"start":1759491607011,"stop":1759491607011,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[{"name":"playwright::0","time":{"start":1759491626396,"stop":1759491626423,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"Record Loan"},{"name":"feature","value":"Loan Management"},{"name":"parentSuite","value":"API_Automation.tests.LoanTest"},{"name":"suite","value":"test_Loan"},{"name":"subSuite","value":"TestLoanManagement"},{"name":"host","value":"Comm-IT"},{"name":"thread","value":"32284-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"API_Automation.tests.LoanTest.test_Loan"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"companyId","value":"'3a1a417d-51c2-bab1-6b7f-5b97cd6a53f8'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"1ad58954cf12ac4f.json","parameterValues":["'3a1a417d-51c2-bab1-6b7f-5b97cd6a53f8'"]}